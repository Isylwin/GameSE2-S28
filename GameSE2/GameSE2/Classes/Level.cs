//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using WinFormsGame.Classes.EntityClasses;
using WinFormsGame.Classes;
using WinFormsGame.Classes.MapClasses;

public class Level
{
    private Settings _settings;
    private List<Entity> _entities;
    private int _levelNumber;

    /// <summary>
    /// The current player in the game,
    /// </summary>
    public Player Player
    {
        get
        {
            return _entities.Find(x => x is Player) as Player;
        }
    }

    /// <summary>
    /// All the enemies in the level.
    /// </summary>
    public List<Enemy> Enemies
    {
        get
        {
            return _entities.OfType<Enemy>().Select(x => x).ToList();
        }
    }

    /// <summary>
    /// All the arrows in the level.
    /// </summary>
    public List<Arrow> Arrows
    {
        get
        {
            return _entities.OfType<Arrow>().Select(x => x).ToList();
        }
    }

    /// <summary>
    /// Retries the current map that is used.
    /// </summary>
    public Map Map { get; }
    
    /// <summary>
    /// All the powerups that are in the level.
    /// </summary>
    public List<PowerUp> PowerUps { get; }

    public ViewPort ViewPort
    {
        get
        {
            var location = Player.Location;
            var cells = Map.GetViewPort(location);
            var entities =
                _entities.FindAll(
                    x =>
                        location.X - _settings.ViewWidth/2 < x.Location.X 
                        && x.Location.X < location.X + _settings.ViewWidth/2
                        && location.Y - _settings.ViewHeight/2 < x.Location.Y
                        && x.Location.Y < location.Y + _settings.ViewHeight/2);

            return new ViewPort(cells, entities, location);
        }
    }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="settings">Game settings</param>
    /// <param name="levelNumber">The level number</param>
    public Level(Settings settings, int levelNumber)
    {
        _settings = settings;
        _levelNumber = levelNumber;
        _entities = new List<Entity>();

        Map = new Map(_settings);
        PowerUps = new List<PowerUp>();

        CreatePlayer();
        CreateEnemies();
    }

    /// <summary>
    /// Currently spawns the player at a random location.
    /// </summary>
    private void CreatePlayer()
    {
        var playerLoc = Map.GetEmptyLocation();

        _entities.Add(new Player(playerLoc));
    }

    /// <summary>
    /// Creates new enemies at least 15 cells away from the player.
    /// </summary>
    private void CreateEnemies()
    {          
        for (int i = 0; i < 30; i++)
        {
            Location enemyLocation;
            bool isInRangeOfPlayer;   

            //Keep getting a location until you've found a spot thats not too close to the player and unoccupied
            do
            {
                enemyLocation = Map.GetEmptyLocation();
                isInRangeOfPlayer = ((Player.Location.X - 15 <= enemyLocation.X && enemyLocation.X <= Player.Location.X + 15)
                                      ||
                                      (Player.Location.Y - 15 <= enemyLocation.Y && enemyLocation.Y <= Player.Location.Y + 15));
            } while ( isInRangeOfPlayer || _entities.Exists(x => x.Location == enemyLocation));

            _entities.Add(new Enemy(enemyLocation));
        }
    }

    /// <summary>
    /// Creates a new arrow with a 
    /// </summary>
    public void CreateArrow()
    {
        Vector vector = new Vector(Player.Vector.XAxis*2, Player.Vector.YAxis*2);
        Location loc = new Location(Player.Location.X + vector.XAxis/vector.Speed, Player.Location.Y + vector.YAxis/vector.Speed);

        var newArrow = new Arrow(loc,vector);

        if (CheckArrowHit(newArrow, loc))
            _entities.Add(newArrow);
    }

    /// <summary>
    /// Checks wheter the arrow will hit an enemy or a wall and handles the hit.
    /// </summary>
    /// <param name="arrow">The arrow</param>
    /// <param name="newloc">The new location of the arrow</param>
    /// <returns></returns>
    public bool CheckArrowHit(Arrow arrow, Location newloc)
    {
        var enemy = Enemies.Find(x => x.Location == newloc);

        if (Map.IsLocationEmpty(newloc) && enemy == null)
        {
            return true;
        }
        else
        {
            if(enemy != null)
                enemy.TakeDamage(arrow.Damage);

            arrow.TakeDamage(1);

            return false;
        }
    }

    public void MovePlayer()
    {
        var newLoc = new Location(Player.Location.X + Player.Vector.XAxis, Player.Location.Y + Player.Vector.YAxis);

        if (Map.IsLocationEmpty(newLoc) && !Enemies.Exists(x => x.Location == newLoc))
            Player.Move();      
    }

    public void RemoveDeadEntities()
    {
        _entities.RemoveAll(x => x.Hitpoints <= 0);
    }
}